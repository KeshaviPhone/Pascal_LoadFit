//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import SideMenu
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `DeviceListVC`, and contains static references to 1 segues.
    struct deviceListVC {
      /// Segue identifier `segueSide`.
      static let segueSide: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceListVC, SideMenu.SideMenuNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueSide")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `segueSide`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueSide(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceListVC, SideMenu.SideMenuNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceListVC.segueSide, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `DeviceVC`, and contains static references to 1 segues.
    struct deviceVC {
      /// Segue identifier `segueSide`.
      static let segueSide: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceVC, SideMenu.SideMenuNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueSide")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `segueSide`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueSide(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceVC, SideMenu.SideMenuNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceVC.segueSide, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `HelpVC`, and contains static references to 1 segues.
    struct helpVC {
      /// Segue identifier `segueSide`.
      static let segueSide: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HelpVC, SideMenu.SideMenuNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueSide")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `segueSide`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueSide(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HelpVC, SideMenu.SideMenuNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.helpVC.segueSide, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `HistoryVC`, and contains static references to 2 segues.
    struct historyVC {
      /// Segue identifier `segueLogList`.
      static let segueLogList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HistoryVC, LogListVC> = Rswift.StoryboardSegueIdentifier(identifier: "segueLogList")
      /// Segue identifier `segueSide`.
      static let segueSide: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HistoryVC, SideMenu.SideMenuNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueSide")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `segueLogList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueLogList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HistoryVC, LogListVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.historyVC.segueLogList, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `segueSide`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueSide(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HistoryVC, SideMenu.SideMenuNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.historyVC.segueSide, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SettingVC`, and contains static references to 1 segues.
    struct settingVC {
      /// Segue identifier `segueSide`.
      static let segueSide: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingVC, SideMenu.SideMenuNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueSide")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `segueSide`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueSide(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingVC, SideMenu.SideMenuNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingVC.segueSide, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `AnchhorEasy_FCM.wav`.
    static let anchhorEasy_FCMWav = Rswift.FileResource(bundle: R.hostingBundle, name: "AnchhorEasy_FCM", pathExtension: "wav")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `OSWALD-REGULAR.TTF`.
    static let oswaldregularttF = Rswift.FileResource(bundle: R.hostingBundle, name: "OSWALD-REGULAR", pathExtension: "TTF")
    /// Resource file `SQR721E.TTF`.
    static let sqr721ETTF = Rswift.FileResource(bundle: R.hostingBundle, name: "SQR721E", pathExtension: "TTF")

    /// `bundle.url(forResource: "AnchhorEasy_FCM", withExtension: "wav")`
    static func anchhorEasy_FCMWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.anchhorEasy_FCMWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OSWALD-REGULAR", withExtension: "TTF")`
    static func oswaldregularttF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oswaldregularttF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SQR721E", withExtension: "TTF")`
    static func sqr721ETTF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sqr721ETTF
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Oswald-Regular`.
    static let oswaldRegular = Rswift.FontResource(fontName: "Oswald-Regular")
    /// Font `Square721BT-RomanExtended`.
    static let square721BTRomanExtended = Rswift.FontResource(fontName: "Square721BT-RomanExtended")

    /// `UIFont(name: "Oswald-Regular", size: ...)`
    static func oswaldRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: oswaldRegular, size: size)
    }

    /// `UIFont(name: "Square721BT-RomanExtended", size: ...)`
    static func square721BTRomanExtended(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: square721BTRomanExtended, size: size)
    }

    static func validate() throws {
      if R.font.oswaldRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Oswald-Regular' could not be loaded, is 'OSWALD-REGULAR.TTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.square721BTRomanExtended(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Square721BT-RomanExtended' could not be loaded, is 'SQR721E.TTF' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 31 images.
  struct image {
    /// Image `a-btn`.
    static let aBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "a-btn")
    /// Image `back_arrow`.
    static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
    /// Image `bg2`.
    static let bg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg2")
    /// Image `bg`.
    static let bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg")
    /// Image `blue`.
    static let blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue")
    /// Image `bluetooth_icon`.
    static let bluetooth_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bluetooth_icon")
    /// Image `caland`.
    static let caland = Rswift.ImageResource(bundle: R.hostingBundle, name: "caland")
    /// Image `cam`.
    static let cam = Rswift.ImageResource(bundle: R.hostingBundle, name: "cam")
    /// Image `dot`.
    static let dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "dot")
    /// Image `drap`.
    static let drap = Rswift.ImageResource(bundle: R.hostingBundle, name: "drap")
    /// Image `drp`.
    static let drp = Rswift.ImageResource(bundle: R.hostingBundle, name: "drp")
    /// Image `em`.
    static let em = Rswift.ImageResource(bundle: R.hostingBundle, name: "em")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `histr`.
    static let histr = Rswift.ImageResource(bundle: R.hostingBundle, name: "histr")
    /// Image `img`.
    static let img = Rswift.ImageResource(bundle: R.hostingBundle, name: "img")
    /// Image `infoPopupIcon`.
    static let infoPopupIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "infoPopupIcon")
    /// Image `kilogram`.
    static let kilogram = Rswift.ImageResource(bundle: R.hostingBundle, name: "kilogram")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `main-logo`.
    static let mainLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "main-logo")
    /// Image `menu-bg`.
    static let menuBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-bg")
    /// Image `menu-button`.
    static let menuButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-button")
    /// Image `off blue`.
    static let offBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "off blue")
    /// Image `off`.
    static let off = Rswift.ImageResource(bundle: R.hostingBundle, name: "off")
    /// Image `on`.
    static let on = Rswift.ImageResource(bundle: R.hostingBundle, name: "on")
    /// Image `save`.
    static let save = Rswift.ImageResource(bundle: R.hostingBundle, name: "save")
    /// Image `set`.
    static let set = Rswift.ImageResource(bundle: R.hostingBundle, name: "set")
    /// Image `stop-button`.
    static let stopButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "stop-button")
    /// Image `top-blue`.
    static let topBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-blue")
    /// Image `top`.
    static let top = Rswift.ImageResource(bundle: R.hostingBundle, name: "top")
    /// Image `wifi`.
    static let wifi = Rswift.ImageResource(bundle: R.hostingBundle, name: "wifi")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "a-btn", bundle: ..., traitCollection: ...)`
    static func aBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
    static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg", bundle: ..., traitCollection: ...)`
    static func bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg2", bundle: ..., traitCollection: ...)`
    static func bg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blue", bundle: ..., traitCollection: ...)`
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bluetooth_icon", bundle: ..., traitCollection: ...)`
    static func bluetooth_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bluetooth_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "caland", bundle: ..., traitCollection: ...)`
    static func caland(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.caland, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cam", bundle: ..., traitCollection: ...)`
    static func cam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cam, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dot", bundle: ..., traitCollection: ...)`
    static func dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drap", bundle: ..., traitCollection: ...)`
    static func drap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drp", bundle: ..., traitCollection: ...)`
    static func drp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "em", bundle: ..., traitCollection: ...)`
    static func em(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.em, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "histr", bundle: ..., traitCollection: ...)`
    static func histr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.histr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img", bundle: ..., traitCollection: ...)`
    static func img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "infoPopupIcon", bundle: ..., traitCollection: ...)`
    static func infoPopupIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoPopupIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kilogram", bundle: ..., traitCollection: ...)`
    static func kilogram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kilogram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main-logo", bundle: ..., traitCollection: ...)`
    static func mainLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-bg", bundle: ..., traitCollection: ...)`
    static func menuBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-button", bundle: ..., traitCollection: ...)`
    static func menuButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "off blue", bundle: ..., traitCollection: ...)`
    static func offBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "off", bundle: ..., traitCollection: ...)`
    static func off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "on", bundle: ..., traitCollection: ...)`
    static func on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "save", bundle: ..., traitCollection: ...)`
    static func save(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.save, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "set", bundle: ..., traitCollection: ...)`
    static func set(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.set, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stop-button", bundle: ..., traitCollection: ...)`
    static func stopButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stopButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top", bundle: ..., traitCollection: ...)`
    static func top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-blue", bundle: ..., traitCollection: ...)`
    static func topBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wifi", bundle: ..., traitCollection: ...)`
    static func wifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wifi, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DeviceListCell`.
    static let deviceListCell: Rswift.ReuseIdentifier<DeviceListCell> = Rswift.ReuseIdentifier(identifier: "DeviceListCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<sideMenuCell> = Rswift.ReuseIdentifier(identifier: "cell")
    /// Reuse identifier `deviceCell`.
    static let deviceCell: Rswift.ReuseIdentifier<deviceCell> = Rswift.ReuseIdentifier(identifier: "deviceCell")
    /// Reuse identifier `historyCell`.
    static let historyCell: Rswift.ReuseIdentifier<historyCell> = Rswift.ReuseIdentifier(identifier: "historyCell")
    /// Reuse identifier `logsFileCell`.
    static let logsFileCell: Rswift.ReuseIdentifier<logsFileCell> = Rswift.ReuseIdentifier(identifier: "logsFileCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 33 localization keys.
    struct localizable {
      /// en translation: Alarm Sound
      ///
      /// Locales: en, fr
      static let alarmSound = Rswift.StringResource(key: "Alarm Sound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Channel
      ///
      /// Locales: en, fr
      static let channel = Rswift.StringResource(key: "Channel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Connection
      ///
      /// Locales: en, fr
      static let scaleConnection = Rswift.StringResource(key: "Scale connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: DEVICE LIST
      ///
      /// Locales: en, fr
      static let devicelisT = Rswift.StringResource(key: "DEVICE LIST", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Delete History
      ///
      /// Locales: en, fr
      static let deleteHistory = Rswift.StringResource(key: "Delete History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Deleted !
      ///
      /// Locales: en, fr
      static let deletedHistorySuccessfully = Rswift.StringResource(key: "Deleted history successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Device Name:
      ///
      /// Locales: en, fr
      static let device = Rswift.StringResource(key: "Device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Disabled!
      ///
      /// Locales: en, fr
      static let weightAlarmDisabled = Rswift.StringResource(key: "Weight alarm disabled!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enabled!
      ///
      /// Locales: en, fr
      static let weightAlarmEnabled = Rswift.StringResource(key: "Weight alarm enabled!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Gross
      ///
      /// Locales: en, fr
      static let gross = Rswift.StringResource(key: "Gross", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, fr
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, fr
      static let history = Rswift.StringResource(key: "History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Imperial
      ///
      /// Locales: en, fr
      static let lbS = Rswift.StringResource(key: "LBS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, fr
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Limits
      ///
      /// Locales: en, fr
      static let limits = Rswift.StringResource(key: "Limits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Metric
      ///
      /// Locales: en, fr
      static let kG = Rswift.StringResource(key: "KG", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Net
      ///
      /// Locales: en, fr
      static let net = Rswift.StringResource(key: "Net", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: No device found, scan again!
      ///
      /// Locales: en, fr
      static let noDeviceFoundPleseScanAgain = Rswift.StringResource(key: "No device found, plese scan again!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: No saved data found!
      ///
      /// Locales: en, fr
      static let opsNoWeightDataFound = Rswift.StringResource(key: "Ops! No weight data found!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, fr
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static let channelALimitSaved = Rswift.StringResource(key: "Channel A Limit Saved.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static let channelBLimitSaved = Rswift.StringResource(key: "Channel B Limit Saved.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static let languageSaved = Rswift.StringResource(key: "Language saved!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static let recordSavedSuccessfully = Rswift.StringResource(key: "Record saved successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static let unitTypeSaved = Rswift.StringResource(key: "Unit type saved!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Scan
      ///
      /// Locales: en, fr
      static let scan = Rswift.StringResource(key: "Scan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, fr
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Share History
      ///
      /// Locales: en, fr
      static let shareHistory = Rswift.StringResource(key: "Share History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Share Logs
      ///
      /// Locales: en, fr
      static let shareLogs = Rswift.StringResource(key: "Share Logs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Stop
      ///
      /// Locales: en, fr
      static let stop = Rswift.StringResource(key: "Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, fr
      static let total = Rswift.StringResource(key: "Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Unit Type
      ///
      /// Locales: en, fr
      static let unitType = Rswift.StringResource(key: "Unit Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Weights
      ///
      /// Locales: en, fr
      static let weights = Rswift.StringResource(key: "Weights", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: Alarm Sound
      ///
      /// Locales: en, fr
      static func alarmSound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alarm Sound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alarm Sound"
        }

        return NSLocalizedString("Alarm Sound", bundle: bundle, comment: "")
      }

      /// en translation: Channel
      ///
      /// Locales: en, fr
      static func channel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Channel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Channel"
        }

        return NSLocalizedString("Channel", bundle: bundle, comment: "")
      }

      /// en translation: Connection
      ///
      /// Locales: en, fr
      static func scaleConnection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Scale connection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Scale connection"
        }

        return NSLocalizedString("Scale connection", bundle: bundle, comment: "")
      }

      /// en translation: DEVICE LIST
      ///
      /// Locales: en, fr
      static func devicelisT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DEVICE LIST", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DEVICE LIST"
        }

        return NSLocalizedString("DEVICE LIST", bundle: bundle, comment: "")
      }

      /// en translation: Delete History
      ///
      /// Locales: en, fr
      static func deleteHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete History"
        }

        return NSLocalizedString("Delete History", bundle: bundle, comment: "")
      }

      /// en translation: Deleted !
      ///
      /// Locales: en, fr
      static func deletedHistorySuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Deleted history successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Deleted history successfully!"
        }

        return NSLocalizedString("Deleted history successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Device Name:
      ///
      /// Locales: en, fr
      static func device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Device"
        }

        return NSLocalizedString("Device", bundle: bundle, comment: "")
      }

      /// en translation: Disabled!
      ///
      /// Locales: en, fr
      static func weightAlarmDisabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weight alarm disabled!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weight alarm disabled!"
        }

        return NSLocalizedString("Weight alarm disabled!", bundle: bundle, comment: "")
      }

      /// en translation: Enabled!
      ///
      /// Locales: en, fr
      static func weightAlarmEnabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weight alarm enabled!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weight alarm enabled!"
        }

        return NSLocalizedString("Weight alarm enabled!", bundle: bundle, comment: "")
      }

      /// en translation: Gross
      ///
      /// Locales: en, fr
      static func gross(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gross", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gross"
        }

        return NSLocalizedString("Gross", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, fr
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help"
        }

        return NSLocalizedString("Help", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, fr
      static func history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "History"
        }

        return NSLocalizedString("History", bundle: bundle, comment: "")
      }

      /// en translation: Imperial
      ///
      /// Locales: en, fr
      static func lbS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LBS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LBS"
        }

        return NSLocalizedString("LBS", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, fr
      static func language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language"
        }

        return NSLocalizedString("Language", bundle: bundle, comment: "")
      }

      /// en translation: Limits
      ///
      /// Locales: en, fr
      static func limits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Limits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Limits"
        }

        return NSLocalizedString("Limits", bundle: bundle, comment: "")
      }

      /// en translation: Metric
      ///
      /// Locales: en, fr
      static func kG(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KG", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "KG"
        }

        return NSLocalizedString("KG", bundle: bundle, comment: "")
      }

      /// en translation: Net
      ///
      /// Locales: en, fr
      static func net(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Net", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Net"
        }

        return NSLocalizedString("Net", bundle: bundle, comment: "")
      }

      /// en translation: No device found, scan again!
      ///
      /// Locales: en, fr
      static func noDeviceFoundPleseScanAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No device found, plese scan again!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No device found, plese scan again!"
        }

        return NSLocalizedString("No device found, plese scan again!", bundle: bundle, comment: "")
      }

      /// en translation: No saved data found!
      ///
      /// Locales: en, fr
      static func opsNoWeightDataFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ops! No weight data found!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ops! No weight data found!"
        }

        return NSLocalizedString("Ops! No weight data found!", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, fr
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static func channelALimitSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Channel A Limit Saved.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Channel A Limit Saved."
        }

        return NSLocalizedString("Channel A Limit Saved.", bundle: bundle, comment: "")
      }

      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static func channelBLimitSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Channel B Limit Saved.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Channel B Limit Saved."
        }

        return NSLocalizedString("Channel B Limit Saved.", bundle: bundle, comment: "")
      }

      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static func languageSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language saved!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language saved!"
        }

        return NSLocalizedString("Language saved!", bundle: bundle, comment: "")
      }

      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static func recordSavedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Record saved successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Record saved successfully!"
        }

        return NSLocalizedString("Record saved successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Saved!
      ///
      /// Locales: en, fr
      static func unitTypeSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit type saved!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unit type saved!"
        }

        return NSLocalizedString("Unit type saved!", bundle: bundle, comment: "")
      }

      /// en translation: Scan
      ///
      /// Locales: en, fr
      static func scan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Scan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Scan"
        }

        return NSLocalizedString("Scan", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, fr
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Share History
      ///
      /// Locales: en, fr
      static func shareHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share History"
        }

        return NSLocalizedString("Share History", bundle: bundle, comment: "")
      }

      /// en translation: Share Logs
      ///
      /// Locales: en, fr
      static func shareLogs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share Logs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share Logs"
        }

        return NSLocalizedString("Share Logs", bundle: bundle, comment: "")
      }

      /// en translation: Stop
      ///
      /// Locales: en, fr
      static func stop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stop"
        }

        return NSLocalizedString("Stop", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, fr
      static func total(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total"
        }

        return NSLocalizedString("Total", bundle: bundle, comment: "")
      }

      /// en translation: Unit Type
      ///
      /// Locales: en, fr
      static func unitType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unit Type"
        }

        return NSLocalizedString("Unit Type", bundle: bundle, comment: "")
      }

      /// en translation: Weights
      ///
      /// Locales: en, fr
      static func weights(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weights", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weights"
        }

        return NSLocalizedString("Weights", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 36 localization keys.
    struct main {
      /// en translation: 24/08/2021 2:05:59 AM
      ///
      /// Locales: fr, en
      static let kNZBWKyaText = Rswift.StringResource(key: "kNZ-bW-kya.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: 73530
      ///
      /// Locales: fr, en
      static let eiIXh6RmText = Rswift.StringResource(key: "EiI-Xh-6Rm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: 73530
      ///
      /// Locales: fr, en
      static let gb5Ea4dxText = Rswift.StringResource(key: "GB5-Ea-4dx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: A
      ///
      /// Locales: fr, en
      static let jV1TSD0aNormalTitle = Rswift.StringResource(key: "jV1-tS-d0a.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: A
      ///
      /// Locales: fr, en
      static let yaO7FkgNormalTitle = Rswift.StringResource(key: "7Ya-O7-fkg.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Alarm Sound
      ///
      /// Locales: fr, en
      static let u7Uy9Text = Rswift.StringResource(key: "554-u7-Uy9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: B
      ///
      /// Locales: fr, en
      static let uGK0I6cNormalTitle = Rswift.StringResource(key: "9uG-K0-I6c.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Channel
      ///
      /// Locales: fr, en
      static let gsiFV3cFText = Rswift.StringResource(key: "Gsi-FV-3cF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Channel
      ///
      /// Locales: fr, en
      static let nb1Ud1uxText = Rswift.StringResource(key: "NB1-ud-1ux.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Cleral Loadfit 1.0.0
      ///
      /// Locales: fr, en
      static let vBuBq6h1Text = Rswift.StringResource(key: "vBu-bq-6h1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: DEVICE LIST
      ///
      /// Locales: fr, en
      static let aaCTZW9BNormalTitle = Rswift.StringResource(key: "aaC-TZ-W9B.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: E-mail
      ///
      /// Locales: fr, en
      static let s2yWFSQcText = Rswift.StringResource(key: "s2y-wF-sQc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Eng
      ///
      /// Locales: fr, en
      static let hozPy6rLNormalTitle = Rswift.StringResource(key: "hoz-py-6rL.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Ex 500
      ///
      /// Locales: fr, en
      static let bqADGZDJText = Rswift.StringResource(key: "bqA-DG-zDJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Ex 500
      ///
      /// Locales: fr, en
      static let sghGxR0hText = Rswift.StringResource(key: "Sgh-gx-r0h.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Ex 500
      ///
      /// Locales: fr, en
      static let udGLpFUxPlaceholder = Rswift.StringResource(key: "UdG-Lp-FUx.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Ex 500
      ///
      /// Locales: fr, en
      static let wucLGOiUPlaceholder = Rswift.StringResource(key: "wuc-lG-oiU.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Gross
      ///
      /// Locales: fr, en
      static let s5XDmHSNText = Rswift.StringResource(key: "s5X-dm-HSN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: HELP
      ///
      /// Locales: fr, en
      static let grBKGCINormalTitle = Rswift.StringResource(key: "7Gr-BK-gCI.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: HISTORY
      ///
      /// Locales: fr, en
      static let c0e7OCjANormalTitle = Rswift.StringResource(key: "c0e-7O-cjA.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: KG
      ///
      /// Locales: fr, en
      static let owrzjNormalTitle = Rswift.StringResource(key: "789-oW-rZJ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: fr, en
      static let kg3XWdText = Rswift.StringResource(key: "60K-g3-XWd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Limits
      ///
      /// Locales: fr, en
      static let s84FKNQ9Text = Rswift.StringResource(key: "s84-fK-NQ9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Net
      ///
      /// Locales: fr, en
      static let toFeHNuText = Rswift.StringResource(key: "2TO-Fe-HNu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: No device found, plese scan again!
      ///
      /// Locales: fr, en
      static let zf2TDBtMText = Rswift.StringResource(key: "zf2-tD-btM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Ops! No weight data found!
      ///
      /// Locales: fr, en
      static let uGfJi9Text = Rswift.StringResource(key: "47U-gf-ji9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: fr, en
      static let de6B3YcYNormalTitle = Rswift.StringResource(key: "DE6-b3-YcY.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: SETTING
      ///
      /// Locales: fr, en
      static let tVc2TCRCNormalTitle = Rswift.StringResource(key: "tVc-2T-CRC.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Scan
      ///
      /// Locales: fr, en
      static let rtPHyKJ3NormalTitle = Rswift.StringResource(key: "RtP-Hy-kJ3.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Setting
      ///
      /// Locales: fr, en
      static let tbF7aJDhText = Rswift.StringResource(key: "TbF-7a-JDh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: fr, en
      static let xsjcdNsYText = Rswift.StringResource(key: "XSJ-cD-nsY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Total 2940 KG GROSS
      ///
      /// Locales: fr, en
      static let oXdFa7v5Text = Rswift.StringResource(key: "OXd-Fa-7v5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Unit Type
      ///
      /// Locales: fr, en
      static let j21NrWCfText = Rswift.StringResource(key: "J21-Nr-wCf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: WEIGHTS
      ///
      /// Locales: fr, en
      static let egc8L7PVNormalTitle = Rswift.StringResource(key: "egc-8L-7PV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: Weights
      ///
      /// Locales: fr, en
      static let em83cHz6Text = Rswift.StringResource(key: "em8-3c-hz6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// en translation: loadfit@cleral.com
      ///
      /// Locales: fr, en
      static let aOaZSZbbText = Rswift.StringResource(key: "aOa-zS-zbb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)

      /// en translation: 24/08/2021 2:05:59 AM
      ///
      /// Locales: fr, en
      static func kNZBWKyaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kNZ-bW-kya.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kNZ-bW-kya.text"
        }

        return NSLocalizedString("kNZ-bW-kya.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 73530
      ///
      /// Locales: fr, en
      static func eiIXh6RmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EiI-Xh-6Rm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EiI-Xh-6Rm.text"
        }

        return NSLocalizedString("EiI-Xh-6Rm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 73530
      ///
      /// Locales: fr, en
      static func gb5Ea4dxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GB5-Ea-4dx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GB5-Ea-4dx.text"
        }

        return NSLocalizedString("GB5-Ea-4dx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: A
      ///
      /// Locales: fr, en
      static func jV1TSD0aNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jV1-tS-d0a.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "jV1-tS-d0a.normalTitle"
        }

        return NSLocalizedString("jV1-tS-d0a.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: A
      ///
      /// Locales: fr, en
      static func yaO7FkgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7Ya-O7-fkg.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7Ya-O7-fkg.normalTitle"
        }

        return NSLocalizedString("7Ya-O7-fkg.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Alarm Sound
      ///
      /// Locales: fr, en
      static func u7Uy9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("554-u7-Uy9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "554-u7-Uy9.text"
        }

        return NSLocalizedString("554-u7-Uy9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: B
      ///
      /// Locales: fr, en
      static func uGK0I6cNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9uG-K0-I6c.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9uG-K0-I6c.normalTitle"
        }

        return NSLocalizedString("9uG-K0-I6c.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Channel
      ///
      /// Locales: fr, en
      static func gsiFV3cFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gsi-FV-3cF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gsi-FV-3cF.text"
        }

        return NSLocalizedString("Gsi-FV-3cF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Channel
      ///
      /// Locales: fr, en
      static func nb1Ud1uxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NB1-ud-1ux.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NB1-ud-1ux.text"
        }

        return NSLocalizedString("NB1-ud-1ux.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Cleral Loadfit 1.0.0
      ///
      /// Locales: fr, en
      static func vBuBq6h1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vBu-bq-6h1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vBu-bq-6h1.text"
        }

        return NSLocalizedString("vBu-bq-6h1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: DEVICE LIST
      ///
      /// Locales: fr, en
      static func aaCTZW9BNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aaC-TZ-W9B.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aaC-TZ-W9B.normalTitle"
        }

        return NSLocalizedString("aaC-TZ-W9B.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: E-mail
      ///
      /// Locales: fr, en
      static func s2yWFSQcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s2y-wF-sQc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "s2y-wF-sQc.text"
        }

        return NSLocalizedString("s2y-wF-sQc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Eng
      ///
      /// Locales: fr, en
      static func hozPy6rLNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hoz-py-6rL.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hoz-py-6rL.normalTitle"
        }

        return NSLocalizedString("hoz-py-6rL.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Ex 500
      ///
      /// Locales: fr, en
      static func bqADGZDJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bqA-DG-zDJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bqA-DG-zDJ.text"
        }

        return NSLocalizedString("bqA-DG-zDJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Ex 500
      ///
      /// Locales: fr, en
      static func sghGxR0hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sgh-gx-r0h.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Sgh-gx-r0h.text"
        }

        return NSLocalizedString("Sgh-gx-r0h.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Ex 500
      ///
      /// Locales: fr, en
      static func udGLpFUxPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UdG-Lp-FUx.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UdG-Lp-FUx.placeholder"
        }

        return NSLocalizedString("UdG-Lp-FUx.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Ex 500
      ///
      /// Locales: fr, en
      static func wucLGOiUPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wuc-lG-oiU.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wuc-lG-oiU.placeholder"
        }

        return NSLocalizedString("wuc-lG-oiU.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Gross
      ///
      /// Locales: fr, en
      static func s5XDmHSNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5X-dm-HSN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "s5X-dm-HSN.text"
        }

        return NSLocalizedString("s5X-dm-HSN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: HELP
      ///
      /// Locales: fr, en
      static func grBKGCINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7Gr-BK-gCI.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7Gr-BK-gCI.normalTitle"
        }

        return NSLocalizedString("7Gr-BK-gCI.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: HISTORY
      ///
      /// Locales: fr, en
      static func c0e7OCjANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c0e-7O-cjA.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "c0e-7O-cjA.normalTitle"
        }

        return NSLocalizedString("c0e-7O-cjA.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: KG
      ///
      /// Locales: fr, en
      static func owrzjNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("789-oW-rZJ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "789-oW-rZJ.normalTitle"
        }

        return NSLocalizedString("789-oW-rZJ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: fr, en
      static func kg3XWdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("60K-g3-XWd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "60K-g3-XWd.text"
        }

        return NSLocalizedString("60K-g3-XWd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Limits
      ///
      /// Locales: fr, en
      static func s84FKNQ9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s84-fK-NQ9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "s84-fK-NQ9.text"
        }

        return NSLocalizedString("s84-fK-NQ9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Net
      ///
      /// Locales: fr, en
      static func toFeHNuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2TO-Fe-HNu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2TO-Fe-HNu.text"
        }

        return NSLocalizedString("2TO-Fe-HNu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: No device found, plese scan again!
      ///
      /// Locales: fr, en
      static func zf2TDBtMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zf2-tD-btM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zf2-tD-btM.text"
        }

        return NSLocalizedString("zf2-tD-btM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Ops! No weight data found!
      ///
      /// Locales: fr, en
      static func uGfJi9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("47U-gf-ji9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "47U-gf-ji9.text"
        }

        return NSLocalizedString("47U-gf-ji9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: fr, en
      static func de6B3YcYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DE6-b3-YcY.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DE6-b3-YcY.normalTitle"
        }

        return NSLocalizedString("DE6-b3-YcY.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: SETTING
      ///
      /// Locales: fr, en
      static func tVc2TCRCNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tVc-2T-CRC.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tVc-2T-CRC.normalTitle"
        }

        return NSLocalizedString("tVc-2T-CRC.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Scan
      ///
      /// Locales: fr, en
      static func rtPHyKJ3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RtP-Hy-kJ3.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RtP-Hy-kJ3.normalTitle"
        }

        return NSLocalizedString("RtP-Hy-kJ3.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Setting
      ///
      /// Locales: fr, en
      static func tbF7aJDhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TbF-7a-JDh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TbF-7a-JDh.text"
        }

        return NSLocalizedString("TbF-7a-JDh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: fr, en
      static func xsjcdNsYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XSJ-cD-nsY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XSJ-cD-nsY.text"
        }

        return NSLocalizedString("XSJ-cD-nsY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total 2940 KG GROSS
      ///
      /// Locales: fr, en
      static func oXdFa7v5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OXd-Fa-7v5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OXd-Fa-7v5.text"
        }

        return NSLocalizedString("OXd-Fa-7v5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Unit Type
      ///
      /// Locales: fr, en
      static func j21NrWCfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J21-Nr-wCf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "J21-Nr-wCf.text"
        }

        return NSLocalizedString("J21-Nr-wCf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: WEIGHTS
      ///
      /// Locales: fr, en
      static func egc8L7PVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("egc-8L-7PV.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "egc-8L-7PV.normalTitle"
        }

        return NSLocalizedString("egc-8L-7PV.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Weights
      ///
      /// Locales: fr, en
      static func em83cHz6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("em8-3c-hz6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "em8-3c-hz6.text"
        }

        return NSLocalizedString("em8-3c-hz6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: loadfit@cleral.com
      ///
      /// Locales: fr, en
      static func aOaZSZbbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aOa-zS-zbb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aOa-zS-zbb.text"
        }

        return NSLocalizedString("aOa-zS-zbb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "main-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'main-logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DeviceListVC

      let bundle = R.hostingBundle
      let deviceListVC = StoryboardViewControllerResource<DeviceListVC>(identifier: "DeviceListVC")
      let deviceVC = StoryboardViewControllerResource<DeviceVC>(identifier: "DeviceVC")
      let helpVC = StoryboardViewControllerResource<HelpVC>(identifier: "HelpVC")
      let historyVC = StoryboardViewControllerResource<HistoryVC>(identifier: "HistoryVC")
      let infoPopupViewController = StoryboardViewControllerResource<InfoPopupViewController>(identifier: "InfoPopupViewController")
      let logListVC = StoryboardViewControllerResource<LogListVC>(identifier: "LogListVC")
      let name = "Main"
      let settingVC = StoryboardViewControllerResource<SettingVC>(identifier: "SettingVC")
      let sideMenuVC = StoryboardViewControllerResource<SideMenuVC>(identifier: "SideMenuVC")

      func deviceListVC(_: Void = ()) -> DeviceListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceListVC)
      }

      func deviceVC(_: Void = ()) -> DeviceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceVC)
      }

      func helpVC(_: Void = ()) -> HelpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpVC)
      }

      func historyVC(_: Void = ()) -> HistoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyVC)
      }

      func infoPopupViewController(_: Void = ()) -> InfoPopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: infoPopupViewController)
      }

      func logListVC(_: Void = ()) -> LogListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logListVC)
      }

      func settingVC(_: Void = ()) -> SettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }

      func sideMenuVC(_: Void = ()) -> SideMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sideMenuVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "a-btn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'a-btn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bluetooth_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bluetooth_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "caland", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'caland' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dot' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "drap", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drap' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "help", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'help' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "histr", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'histr' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "infoPopupIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'infoPopupIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mail' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "main-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'main-logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu-bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu-button' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "off blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'off blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'on' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "save", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'save' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stop-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stop-button' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top-blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().deviceListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceListVC' could not be loaded from storyboard 'Main' as 'DeviceListVC'.") }
        if _R.storyboard.main().deviceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceVC' could not be loaded from storyboard 'Main' as 'DeviceVC'.") }
        if _R.storyboard.main().helpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpVC' could not be loaded from storyboard 'Main' as 'HelpVC'.") }
        if _R.storyboard.main().historyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyVC' could not be loaded from storyboard 'Main' as 'HistoryVC'.") }
        if _R.storyboard.main().infoPopupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'infoPopupViewController' could not be loaded from storyboard 'Main' as 'InfoPopupViewController'.") }
        if _R.storyboard.main().logListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logListVC' could not be loaded from storyboard 'Main' as 'LogListVC'.") }
        if _R.storyboard.main().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Main' as 'SettingVC'.") }
        if _R.storyboard.main().sideMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuVC' could not be loaded from storyboard 'Main' as 'SideMenuVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
